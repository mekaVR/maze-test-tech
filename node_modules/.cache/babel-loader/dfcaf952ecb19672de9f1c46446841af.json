{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst common_1 = require(\"./domain/common\");\n\nconst simple_1 = require(\"./generator/simple\");\n/**\n * Class defining the necessary configuration for {@link Amazer}.\n */\n\n\nclass Config {\n  /**\n   * @param size The size of the area to be generated\n   * @param generator The generator algorithm to use\n   * @param modifiers The modifiers to apply to the generated area. May be empty.\n   */\n  constructor(size, generator, modifiers) {\n    this._size = size;\n    this._generator = generator;\n    this._modifiers = modifiers || [];\n  } // TODO Allow simplified object\n  // TODO Add docu\n\n\n  static fromObject(data) {\n    let modifiers = [];\n\n    if (data.modifier !== undefined) {\n      modifiers.push(...data.modifier);\n    }\n\n    if (data.modifiers !== undefined) {\n      modifiers.push(...data.modifiers);\n    }\n\n    return new Config(common_1.Size.fromObject(data), data.generator || {\n      generator: simple_1.RecursiveBacktracker,\n      config: undefined\n    }, modifiers);\n  }\n\n  get size() {\n    return this._size;\n  }\n\n  get generator() {\n    return this._generator;\n  }\n\n  get modifiers() {\n    return this._modifiers;\n  }\n\n}\n\nexports.Config = Config; // TODO Allow simple values for configuration\n\n/**\n * Builder for {@link Amazer amazer instances}.\n *\n * Example usage:\n * ```typescript\n * const amazer: Amazer = new ConfigBuilder()\n *      .withSize({width: 10, height: 10})\n *      .using(RandomizedPrim)\n *      .andModifier(Emmure)\n *      .andModifier(BreakPassages)\n *      .build()\n * ```\n */\n\nclass AmazerBuilder {\n  constructor() {\n    this._modifiers = [];\n  }\n  /**\n   * Sets the areas size.\n   *\n   * @returns This instance for method chaining.\n   */\n\n\n  withSize(size) {\n    this._size = size;\n    return this;\n  }\n  /**\n   * Sets the areas width.\n   *\n   * @returns This instance for method chaining.\n   */\n\n\n  withWidth(width) {\n    if (this._size === undefined) {\n      this._size = {\n        width: 0,\n        height: 0\n      };\n    }\n\n    this._size.width = width;\n    return this;\n  }\n  /**\n   * Sets the areas height.\n   *\n   * @returns This instance for method chaining.\n   */\n\n\n  withHeight(height) {\n    if (this._size === undefined) {\n      this._size = {\n        width: 0,\n        height: 0\n      };\n    }\n\n    this._size.width = height;\n    return this;\n  }\n  /**\n   * Sets the algorithm to generate the area and optionally its config.\n   *\n   * @param generator The algorithm to use\n   * @param config The algorithms config\n   *\n   * @returns This instance for method chaining.\n   */\n\n\n  using(generator, config) {\n    this._generator = {\n      generator: generator,\n      config: config\n    };\n    return this;\n  }\n  /**\n   * Adds a modifier to be applied to generated areas and optionally its config.\n   *\n   * @param generator The modifier to add\n   * @param config The modifiers config\n   *\n   * @returns This instance for method chaining.\n   */\n\n\n  andModifier(modifier, config) {\n    this._modifiers.push({\n      modifier: modifier,\n      config: config\n    });\n\n    return this;\n  }\n  /**\n   * Creates a new {@link Amazer} with the current config. The builder can be used\n   * afterwards to create additional instances without modifying the ones already created.\n   *\n   * @throws An error, if the size has not been set\n   * @throws An error, if either width or height are 0\n   * @throws An error, if no generator has been set\n   */\n\n\n  build() {\n    if (this._size === undefined || this._size.height === 0 || this._size.width === 0) {\n      throw new Error(`Invalid size ${this._size}: Must be set and have values > 0`);\n    }\n\n    if (this._generator === undefined) {\n      throw new Error(\"No generator has been set\");\n    }\n\n    return new Config(Object.assign({}, this._size), this._generator, [...this._modifiers]);\n  }\n  /**\n   * Method stub to ease usage of {@link amazer amazer entrypoint}.\n   *\n   * @ignore\n   */\n\n\n  generate() {\n    throw new Error(\"Not implemented\");\n  }\n\n}\n\nexports.AmazerBuilder = AmazerBuilder;\n/**\n * Root class to generate {@link Area Areas}. Has a single config, but can be reused to generate\n * several areas.\n */\n\nclass Amazer {\n  constructor(config) {\n    this.config = config;\n  }\n  /**\n   * Generate a new area.\n   */\n\n\n  generate() {\n    const generatorConfig = Object.assign({\n      size: this.config.size\n    }, this.config.generator.config);\n    let area = this.config.generator.generator(generatorConfig);\n\n    for (let m of this.config.modifiers) {\n      area = m.modifier(area, Object.assign({}, m.config));\n    }\n\n    return area;\n  }\n\n}\n\nexports.Amazer = Amazer;\n/**\n * Global entrypoint for the amazer library.\n *\n * Creates a new {@link Amazer} instance for the given {@link Config} or a new {@link AmazerBuilder},\n * if no {@link Config} is provided.\n *\n * @param config The amazer config\n *\n * @returns A new {@link Amazer}, if a config is given, a new {@link AmazerBuilder} otherwhise.\n */\n\nfunction amazer(config) {\n  if (config === undefined) {\n    return new AmazerBuilder();\n  } else {\n    return new Amazer(config);\n  }\n}\n\nexports.default = amazer;","map":{"version":3,"sources":["/Users/meka/Sites/frontend-tech-test/node_modules/amazer/dist/amazer.js"],"names":["Object","defineProperty","exports","value","common_1","require","simple_1","Config","constructor","size","generator","modifiers","_size","_generator","_modifiers","fromObject","data","modifier","undefined","push","Size","RecursiveBacktracker","config","AmazerBuilder","withSize","withWidth","width","height","withHeight","using","andModifier","build","Error","assign","generate","Amazer","generatorConfig","area","m","amazer","default"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst common_1 = require(\"./domain/common\");\nconst simple_1 = require(\"./generator/simple\");\n/**\n * Class defining the necessary configuration for {@link Amazer}.\n */\nclass Config {\n    /**\n     * @param size The size of the area to be generated\n     * @param generator The generator algorithm to use\n     * @param modifiers The modifiers to apply to the generated area. May be empty.\n     */\n    constructor(size, generator, modifiers) {\n        this._size = size;\n        this._generator = generator;\n        this._modifiers = modifiers || [];\n    }\n    // TODO Allow simplified object\n    // TODO Add docu\n    static fromObject(data) {\n        let modifiers = [];\n        if (data.modifier !== undefined) {\n            modifiers.push(...data.modifier);\n        }\n        if (data.modifiers !== undefined) {\n            modifiers.push(...data.modifiers);\n        }\n        return new Config(common_1.Size.fromObject(data), data.generator || { generator: simple_1.RecursiveBacktracker, config: undefined }, modifiers);\n    }\n    get size() {\n        return this._size;\n    }\n    get generator() {\n        return this._generator;\n    }\n    get modifiers() {\n        return this._modifiers;\n    }\n}\nexports.Config = Config;\n// TODO Allow simple values for configuration\n/**\n * Builder for {@link Amazer amazer instances}.\n *\n * Example usage:\n * ```typescript\n * const amazer: Amazer = new ConfigBuilder()\n *      .withSize({width: 10, height: 10})\n *      .using(RandomizedPrim)\n *      .andModifier(Emmure)\n *      .andModifier(BreakPassages)\n *      .build()\n * ```\n */\nclass AmazerBuilder {\n    constructor() {\n        this._modifiers = [];\n    }\n    /**\n     * Sets the areas size.\n     *\n     * @returns This instance for method chaining.\n     */\n    withSize(size) {\n        this._size = size;\n        return this;\n    }\n    /**\n     * Sets the areas width.\n     *\n     * @returns This instance for method chaining.\n     */\n    withWidth(width) {\n        if (this._size === undefined) {\n            this._size = { width: 0, height: 0 };\n        }\n        this._size.width = width;\n        return this;\n    }\n    /**\n     * Sets the areas height.\n     *\n     * @returns This instance for method chaining.\n     */\n    withHeight(height) {\n        if (this._size === undefined) {\n            this._size = { width: 0, height: 0 };\n        }\n        this._size.width = height;\n        return this;\n    }\n    /**\n     * Sets the algorithm to generate the area and optionally its config.\n     *\n     * @param generator The algorithm to use\n     * @param config The algorithms config\n     *\n     * @returns This instance for method chaining.\n     */\n    using(generator, config) {\n        this._generator = { generator: generator, config: config };\n        return this;\n    }\n    /**\n     * Adds a modifier to be applied to generated areas and optionally its config.\n     *\n     * @param generator The modifier to add\n     * @param config The modifiers config\n     *\n     * @returns This instance for method chaining.\n     */\n    andModifier(modifier, config) {\n        this._modifiers.push({ modifier: modifier, config: config });\n        return this;\n    }\n    /**\n     * Creates a new {@link Amazer} with the current config. The builder can be used\n     * afterwards to create additional instances without modifying the ones already created.\n     *\n     * @throws An error, if the size has not been set\n     * @throws An error, if either width or height are 0\n     * @throws An error, if no generator has been set\n     */\n    build() {\n        if (this._size === undefined || this._size.height === 0 || this._size.width === 0) {\n            throw new Error(`Invalid size ${this._size}: Must be set and have values > 0`);\n        }\n        if (this._generator === undefined) {\n            throw new Error(\"No generator has been set\");\n        }\n        return new Config(Object.assign({}, this._size), this._generator, [...this._modifiers]);\n    }\n    /**\n     * Method stub to ease usage of {@link amazer amazer entrypoint}.\n     *\n     * @ignore\n     */\n    generate() {\n        throw new Error(\"Not implemented\");\n    }\n}\nexports.AmazerBuilder = AmazerBuilder;\n/**\n * Root class to generate {@link Area Areas}. Has a single config, but can be reused to generate\n * several areas.\n */\nclass Amazer {\n    constructor(config) {\n        this.config = config;\n    }\n    /**\n     * Generate a new area.\n     */\n    generate() {\n        const generatorConfig = Object.assign({ size: this.config.size }, this.config.generator.config);\n        let area = this.config.generator.generator(generatorConfig);\n        for (let m of this.config.modifiers) {\n            area = m.modifier(area, Object.assign({}, m.config));\n        }\n        return area;\n    }\n}\nexports.Amazer = Amazer;\n/**\n * Global entrypoint for the amazer library.\n *\n * Creates a new {@link Amazer} instance for the given {@link Config} or a new {@link AmazerBuilder},\n * if no {@link Config} is provided.\n *\n * @param config The amazer config\n *\n * @returns A new {@link Amazer}, if a config is given, a new {@link AmazerBuilder} otherwhise.\n */\nfunction amazer(config) {\n    if (config === undefined) {\n        return new AmazerBuilder();\n    }\n    else {\n        return new Amazer(config);\n    }\n}\nexports.default = amazer;\n"]},"metadata":{},"sourceType":"script"}