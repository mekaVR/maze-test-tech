{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst util_1 = require(\"../util\");\n\nconst _modifiers = {};\nconst _configFields = {};\n/**\n * Registers the given {@link AreaModifier} and the fields describing\n * its config (without the fields in {@link ModifierConfig}). This allows\n * other utility methods to retrieve the registered modifier and construct\n * its config.\n *\n * @see {@link modifiers}\n * @see {@link modifier}\n * @see {@link parseModifier}\n */\n\nfunction registerModifier(name, modifier, configFields) {\n  _modifiers[name] = modifier;\n\n  if (configFields !== undefined) {\n    _configFields[name] = configFields;\n  }\n}\n\nexports.registerModifier = registerModifier;\n/**\n * @returns A list of all {@link registerModifier registered} and their config\n *      {@link Field fields} (if provided) as tuples.\n */\n\nfunction modifiers() {\n  let result = [];\n\n  for (let name in _modifiers) {\n    result.push({\n      name: name,\n      modifier: _modifiers[name],\n      configFields: _configFields[name]\n    });\n  }\n\n  return result;\n}\n\nexports.modifiers = modifiers;\n/**\n * Parses the given data as {@link AreaModifier} with config (if possible).\n *\n * The given data must be string with format `<modifier name>[:<config data>]`\n * or an object, where the first key is the modifier name and its value is\n * the config data.\n *\n * {@link configFrom} is used to create a config object from the config data.\n *\n * @param data The generator data to be parsed\n *\n * @throws An error, if the config data can not be parsed.\n */\n\nfunction parseModifier(arg) {\n  let modifierName;\n  let configData;\n\n  if (typeof arg === \"string\") {\n    const parts = arg.split(\":\");\n    modifierName = parts[0];\n    configData = parts[1];\n  } else {\n    modifierName = Object.keys(arg)[0];\n    configData = arg[modifierName];\n  }\n\n  const _modifier = modifier(modifierName);\n\n  let config = undefined;\n\n  if (configData !== undefined && _configFields.hasOwnProperty(_modifier.name)) {\n    try {\n      config = util_1.configFrom(configData, _configFields[_modifier.name]);\n    } catch (error) {\n      throw new Error(`Error parsing config for modifier ${modifierName}: ${error.message}`);\n    }\n  }\n\n  return {\n    modifier: _modifier,\n    config: config\n  };\n}\n\nexports.parseModifier = parseModifier;\n/**\n * @param name The modifiers name\n *\n * @returns The {@link AreaModifier} with the given name.\n *\n * @throws An error, if no modifier with the given name can be found.\n */\n\nfunction modifier(name) {\n  const modifier = _modifiers[name];\n\n  if (modifier === undefined) {\n    throw new Error(`No modifier with name ${name} could be found`);\n  }\n\n  return modifier;\n}\n\nexports.modifier = modifier;","map":{"version":3,"sources":["/Users/meka/Sites/frontend-tech-test/node_modules/amazer/dist/modifier/base.js"],"names":["Object","defineProperty","exports","value","util_1","require","_modifiers","_configFields","registerModifier","name","modifier","configFields","undefined","modifiers","result","push","parseModifier","arg","modifierName","configData","parts","split","keys","_modifier","config","hasOwnProperty","configFrom","error","Error","message"],"mappings":"AAAA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,SAAD,CAAtB;;AACA,MAAMC,UAAU,GAAG,EAAnB;AACA,MAAMC,aAAa,GAAG,EAAtB;AACA;;;;;;;;;;;AAUA,SAASC,gBAAT,CAA0BC,IAA1B,EAAgCC,QAAhC,EAA0CC,YAA1C,EAAwD;AACpDL,EAAAA,UAAU,CAACG,IAAD,CAAV,GAAmBC,QAAnB;;AACA,MAAIC,YAAY,KAAKC,SAArB,EAAgC;AAC5BL,IAAAA,aAAa,CAACE,IAAD,CAAb,GAAsBE,YAAtB;AACH;AACJ;;AACDT,OAAO,CAACM,gBAAR,GAA2BA,gBAA3B;AACA;;;;;AAIA,SAASK,SAAT,GAAqB;AACjB,MAAIC,MAAM,GAAG,EAAb;;AACA,OAAK,IAAIL,IAAT,IAAiBH,UAAjB,EAA6B;AACzBQ,IAAAA,MAAM,CAACC,IAAP,CAAY;AACRN,MAAAA,IAAI,EAAEA,IADE;AAERC,MAAAA,QAAQ,EAAEJ,UAAU,CAACG,IAAD,CAFZ;AAGRE,MAAAA,YAAY,EAAEJ,aAAa,CAACE,IAAD;AAHnB,KAAZ;AAKH;;AACD,SAAOK,MAAP;AACH;;AACDZ,OAAO,CAACW,SAAR,GAAoBA,SAApB;AACA;;;;;;;;;;;;;;AAaA,SAASG,aAAT,CAAuBC,GAAvB,EAA4B;AACxB,MAAIC,YAAJ;AACA,MAAIC,UAAJ;;AACA,MAAI,OAAOF,GAAP,KAAe,QAAnB,EAA6B;AACzB,UAAMG,KAAK,GAAGH,GAAG,CAACI,KAAJ,CAAU,GAAV,CAAd;AACAH,IAAAA,YAAY,GAAGE,KAAK,CAAC,CAAD,CAApB;AACAD,IAAAA,UAAU,GAAGC,KAAK,CAAC,CAAD,CAAlB;AACH,GAJD,MAKK;AACDF,IAAAA,YAAY,GAAGlB,MAAM,CAACsB,IAAP,CAAYL,GAAZ,EAAiB,CAAjB,CAAf;AACAE,IAAAA,UAAU,GAAGF,GAAG,CAACC,YAAD,CAAhB;AACH;;AACD,QAAMK,SAAS,GAAGb,QAAQ,CAACQ,YAAD,CAA1B;;AACA,MAAIM,MAAM,GAAGZ,SAAb;;AACA,MAAIO,UAAU,KAAKP,SAAf,IAA4BL,aAAa,CAACkB,cAAd,CAA6BF,SAAS,CAACd,IAAvC,CAAhC,EAA8E;AAC1E,QAAI;AACAe,MAAAA,MAAM,GAAGpB,MAAM,CAACsB,UAAP,CAAkBP,UAAlB,EAA8BZ,aAAa,CAACgB,SAAS,CAACd,IAAX,CAA3C,CAAT;AACH,KAFD,CAGA,OAAOkB,KAAP,EAAc;AACV,YAAM,IAAIC,KAAJ,CAAW,qCAAoCV,YAAa,KAAIS,KAAK,CAACE,OAAQ,EAA9E,CAAN;AACH;AACJ;;AACD,SAAO;AAAEnB,IAAAA,QAAQ,EAAEa,SAAZ;AAAuBC,IAAAA,MAAM,EAAEA;AAA/B,GAAP;AACH;;AACDtB,OAAO,CAACc,aAAR,GAAwBA,aAAxB;AACA;;;;;;;;AAOA,SAASN,QAAT,CAAkBD,IAAlB,EAAwB;AACpB,QAAMC,QAAQ,GAAGJ,UAAU,CAACG,IAAD,CAA3B;;AACA,MAAIC,QAAQ,KAAKE,SAAjB,EAA4B;AACxB,UAAM,IAAIgB,KAAJ,CAAW,yBAAwBnB,IAAK,iBAAxC,CAAN;AACH;;AACD,SAAOC,QAAP;AACH;;AACDR,OAAO,CAACQ,QAAR,GAAmBA,QAAnB","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst util_1 = require(\"../util\");\nconst _modifiers = {};\nconst _configFields = {};\n/**\n * Registers the given {@link AreaModifier} and the fields describing\n * its config (without the fields in {@link ModifierConfig}). This allows\n * other utility methods to retrieve the registered modifier and construct\n * its config.\n *\n * @see {@link modifiers}\n * @see {@link modifier}\n * @see {@link parseModifier}\n */\nfunction registerModifier(name, modifier, configFields) {\n    _modifiers[name] = modifier;\n    if (configFields !== undefined) {\n        _configFields[name] = configFields;\n    }\n}\nexports.registerModifier = registerModifier;\n/**\n * @returns A list of all {@link registerModifier registered} and their config\n *      {@link Field fields} (if provided) as tuples.\n */\nfunction modifiers() {\n    let result = [];\n    for (let name in _modifiers) {\n        result.push({\n            name: name,\n            modifier: _modifiers[name],\n            configFields: _configFields[name]\n        });\n    }\n    return result;\n}\nexports.modifiers = modifiers;\n/**\n * Parses the given data as {@link AreaModifier} with config (if possible).\n *\n * The given data must be string with format `<modifier name>[:<config data>]`\n * or an object, where the first key is the modifier name and its value is\n * the config data.\n *\n * {@link configFrom} is used to create a config object from the config data.\n *\n * @param data The generator data to be parsed\n *\n * @throws An error, if the config data can not be parsed.\n */\nfunction parseModifier(arg) {\n    let modifierName;\n    let configData;\n    if (typeof arg === \"string\") {\n        const parts = arg.split(\":\");\n        modifierName = parts[0];\n        configData = parts[1];\n    }\n    else {\n        modifierName = Object.keys(arg)[0];\n        configData = arg[modifierName];\n    }\n    const _modifier = modifier(modifierName);\n    let config = undefined;\n    if (configData !== undefined && _configFields.hasOwnProperty(_modifier.name)) {\n        try {\n            config = util_1.configFrom(configData, _configFields[_modifier.name]);\n        }\n        catch (error) {\n            throw new Error(`Error parsing config for modifier ${modifierName}: ${error.message}`);\n        }\n    }\n    return { modifier: _modifier, config: config };\n}\nexports.parseModifier = parseModifier;\n/**\n * @param name The modifiers name\n *\n * @returns The {@link AreaModifier} with the given name.\n *\n * @throws An error, if no modifier with the given name can be found.\n */\nfunction modifier(name) {\n    const modifier = _modifiers[name];\n    if (modifier === undefined) {\n        throw new Error(`No modifier with name ${name} could be found`);\n    }\n    return modifier;\n}\nexports.modifier = modifier;\n"]},"metadata":{},"sourceType":"script"}