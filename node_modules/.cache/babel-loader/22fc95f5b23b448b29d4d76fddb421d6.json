{"ast":null,"code":"var _jsxFileName = \"/Users/meka/Sites/frontend-tech-test/src/Maze.js\";\nimport React from \"react\";\nimport * as images from \"./images\";\nimport \"./Maze.css\";\n\nfunction fuckBrain(indexRow, indexCell, cell) {\n  switch (indexRow) {\n    case 1:\n      return /*#__PURE__*/React.createElement(\"img\", {\n        src: indexCell === 1 ? images.stairsUp : images.wall,\n        alt: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 9\n        }\n      });\n      break;\n\n    case 21:\n      return /*#__PURE__*/React.createElement(\"img\", {\n        src: indexCell === 20 ? images.stairsdown : images.wall,\n        alt: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 15,\n          columnNumber: 9\n        }\n      });\n\n    default:\n      return /*#__PURE__*/React.createElement(\"img\", {\n        src: cell.passable ? images.floor : images.wall,\n        alt: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 19,\n          columnNumber: 9\n        }\n      });\n  }\n}\n\nfunction Maze({\n  maze\n}) {\n  console.log(maze.tiles);\n  return /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Maze\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 5\n    }\n  }, maze.tiles.map((row, indexRow) => /*#__PURE__*/React.createElement(\"div\", {\n    className: \"Maze-row\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 30,\n      columnNumber: 9\n    }\n  }, row.map((cell, indexCell) => indexRow === 0 ? /*#__PURE__*/React.createElement(\"img\", {\n    src: indexCell === 1 ? images.stairsUp : images.wall,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 15\n    }\n  }) : /*#__PURE__*/React.createElement(\"img\", {\n    src: cell.passable ? images.floor : images.wall,\n    alt: \"\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 15\n    }\n  })))));\n}\n\nexport default Maze;","map":{"version":3,"sources":["/Users/meka/Sites/frontend-tech-test/src/Maze.js"],"names":["React","images","fuckBrain","indexRow","indexCell","cell","stairsUp","wall","stairsdown","passable","floor","Maze","maze","console","log","tiles","map","row"],"mappings":";AAAA,OAAOA,KAAP,MAAkB,OAAlB;AAEA,OAAO,KAAKC,MAAZ,MAAwB,UAAxB;AACA,OAAO,YAAP;;AAEA,SAASC,SAAT,CAAmBC,QAAnB,EAA6BC,SAA7B,EAAwCC,IAAxC,EAA6C;AAC3C,UAAQF,QAAR;AACE,SAAK,CAAL;AACE,0BACE;AAAK,QAAA,GAAG,EAAEC,SAAS,KAAK,CAAd,GAAkBH,MAAM,CAACK,QAAzB,GAAoCL,MAAM,CAACM,IAArD;AAA2D,QAAA,GAAG,EAAC,EAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAGA;;AACF,SAAK,EAAL;AACE,0BACE;AAAK,QAAA,GAAG,EAAEH,SAAS,KAAK,EAAd,GAAmBH,MAAM,CAACO,UAA1B,GAAuCP,MAAM,CAACM,IAAxD;AAA8D,QAAA,GAAG,EAAC,EAAlE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;;AAGF;AACE,0BACE;AAAK,QAAA,GAAG,EAAEF,IAAI,CAACI,QAAL,GAAgBR,MAAM,CAACS,KAAvB,GAA+BT,MAAM,CAACM,IAAhD;AAAsD,QAAA,GAAG,EAAC,EAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QADF;AAXJ;AAeD;;AAGD,SAASI,IAAT,CAAc;AAAEC,EAAAA;AAAF,CAAd,EAAwB;AACtBC,EAAAA,OAAO,CAACC,GAAR,CAAYF,IAAI,CAACG,KAAjB;AACA,sBACE;AAAK,IAAA,SAAS,EAAC,MAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGH,IAAI,CAACG,KAAL,CAAWC,GAAX,CAAe,CAACC,GAAD,EAAMd,QAAN,kBACd;AAAK,IAAA,SAAS,EAAC,UAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACGc,GAAG,CAACD,GAAJ,CAAQ,CAACX,IAAD,EAAOD,SAAP,KACPD,QAAQ,KAAK,CAAb,gBACE;AAAK,IAAA,GAAG,EAAEC,SAAS,KAAK,CAAd,GAAkBH,MAAM,CAACK,QAAzB,GAAoCL,MAAM,CAACM,IAArD;AAA2D,IAAA,GAAG,EAAC,EAA/D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,gBAEE;AAAK,IAAA,GAAG,EAAEF,IAAI,CAACI,QAAL,GAAgBR,MAAM,CAACS,KAAvB,GAA+BT,MAAM,CAACM,IAAhD;AAAsD,IAAA,GAAG,EAAC,EAA1D;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAHH,CADH,CADD,CADH,CADF;AAaD;;AAED,eAAeI,IAAf","sourcesContent":["import React from \"react\"\n\nimport * as images from \"./images\"\nimport \"./Maze.css\"\n\nfunction fuckBrain(indexRow, indexCell, cell){\n  switch (indexRow) {\n    case 1:\n      return(\n        <img src={indexCell === 1 ? images.stairsUp : images.wall} alt=\"\" />\n      )\n      break;\n    case 21:\n      return(\n        <img src={indexCell === 20 ? images.stairsdown : images.wall} alt=\"\" />\n      )\n    default:\n      return(\n        <img src={cell.passable ? images.floor : images.wall} alt=\"\" />\n      )\n  }\n}\n\n\nfunction Maze({ maze }) {\n  console.log(maze.tiles)\n  return (\n    <div className=\"Maze\">\n      {maze.tiles.map((row, indexRow) => (\n        <div className=\"Maze-row\">\n          {row.map((cell, indexCell) => (\n            indexRow === 0\n            ? <img src={indexCell === 1 ? images.stairsUp : images.wall} alt=\"\" />\n            : <img src={cell.passable ? images.floor : images.wall} alt=\"\" />\n          ))}\n        </div>\n      ))}\n    </div>\n  )\n}\n\nexport default Maze\n"]},"metadata":{},"sourceType":"module"}