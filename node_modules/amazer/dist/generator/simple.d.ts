import { Area } from "../domain/area";
import { AreaGenerator, GeneratorConfig } from "./base";
import { Vector } from "../domain/common";
/**
 * Area generation algorithm using on a depth first
 * {@link https://en.wikipedia.org/wiki/Maze_generation_algorithm#Recursive_backtracker recursive backtracker}
 * algorithm. This algorithm has no separate config.
 *
 * Generates dense, perfect areas with low branching factor and
 * many long corridors. For example:
 * ```
 * ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
 * ┃               #       #       ┃
 * ┃ # # # #   # # #   #   #   #   ┃
 * ┃           #       #       #   ┃
 * ┃   # # # # #   # # # # # # #   ┃
 * ┃   #       #               #   ┃
 * ┃   #   #   #   # # # # # # #   ┃
 * ┃       #   #   #           #   ┃
 * ┃   # # #   #   #   # # # # #   ┃
 * ┃       #   #   #           #   ┃
 * ┃ # #   #   #   # # # # #   #   ┃
 * ┃       #       #       #   #   ┃
 * ┃   # # # # # # # # #   #   #   ┃
 * ┃   #           #       #       ┃
 * ┃   # # #   #   #   #   # # # # ┃
 * ┃           #       #           ┃
 * ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
 * ```
 */
export declare const RecursiveBacktracker: AreaGenerator<GeneratorConfig>;
/** @ignore */
export declare function recursiveBacktrack(area: Area, start: Vector): void;
/**
 * Area generation algorithm based on
 * {@link https://en.wikipedia.org/wiki/Maze_generation_algorithm#Randomized_Kruskal's_algorithm Randomized Kruskal's}.
 * This algorithm has no separate config.
 *
 * Generates dense, perfect areas with high branching factor and
 * many deadends that are easy to solve. For example:
 * ```
 * ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
 * ┃                           #   ┃
 * ┃ # #   # # # # # # #   # # #   ┃
 * ┃   #       #       #   #       ┃
 * ┃   # # #   # # #   # # #   # # ┃
 * ┃       #   #                   ┃
 * ┃   #   #   #   # # # # #   # # ┃
 * ┃   #           #       #       ┃
 * ┃ # #   #   #   # # #   #   #   ┃
 * ┃   #   #   #       #   #   #   ┃
 * ┃   # # # # # # #   #   # # # # ┃
 * ┃                               ┃
 * ┃ # #   # # #   # # # # # # # # ┃
 * ┃       #                       ┃
 * ┃ # # # # # #   # # # # # # #   ┃
 * ┃               #               ┃
 * ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
 * ```
 */
export declare const RandomizedKruskal: AreaGenerator<GeneratorConfig>;
/**
 * Area generation algorithm based on
 * {@link https://en.wikipedia.org/wiki/Maze_generation_algorithm#Randomized_Prim's_algorithm Randomized Prim's}.
 * This algorithm has no separate config.
 *
 * Generates dense, perfect areas with high branching factor and
 * many deadends that are easy to solve. For example:
 * ```
 * ┏━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┓
 * ┃   #   #   #           #   #   ┃
 * ┃   #   #   # # #   # # #   #   ┃
 * ┃           #   #           #   ┃
 * ┃ # # # #   #   # # #   # # #   ┃
 * ┃                       #   #   ┃
 * ┃ # # # # # # # #   #   #   #   ┃
 * ┃   #       #       #   #       ┃
 * ┃   # # #   # # #   # # #   # # ┃
 * ┃   #   #   #   #       #       ┃
 * ┃   #   #   #   #   # # # # #   ┃
 * ┃   #   #   #           #       ┃
 * ┃   #   #   # # #   # # #   # # ┃
 * ┃           #                   ┃
 * ┃ # # # #   # # #   #   #   # # ┃
 * ┃                   #   #       ┃
 * ┗━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━━┛
 * ```
 */
export declare const RandomizedPrim: AreaGenerator<GeneratorConfig>;
/**
 * Generates a completely random {@link Area}, where each
 * tile has a 50/50 change to be floor or wall.
 */
export declare const RandomArea: AreaGenerator<GeneratorConfig>;
