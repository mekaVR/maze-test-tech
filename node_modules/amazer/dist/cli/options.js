"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
const common_1 = require("../domain/common");
const base_1 = require("../generator/base");
const simple_1 = require("../generator/simple");
const base_2 = require("../modifier/base");
function sharedOptions() {
    return {
        c: {
            alias: "config",
            type: "string",
            describe: "The configuration file",
            requiresArg: true
        },
        s: {
            alias: "size",
            type: "string",
            coerce: common_1.Size.fromString,
            describe: "The areas size as WIDTHxHEIGHT",
            requiresArg: true
        },
        g: {
            alias: "generator",
            type: "string",
            coerce: base_1.parseGenerator,
            describe: `The area generator to use, defaults to ${util_1.capitalize(simple_1.RecursiveBacktracker.name)}`,
            requiresArg: true
        },
        m: {
            alias: "modifier",
            type: "array",
            coerce: parseModifiers,
            describe: "The modifiers to apply after the generation",
            requiresArg: true
        },
        f: {
            alias: "format",
            choices: ["binary", "base64", "plain"],
            describe: "The format of the output file, defaults to binary",
            requiresArg: true
        },
    };
}
function parseModifiers(modifierArgs) {
    return modifierArgs.map(arg => base_2.parseModifier(arg));
}
exports.cliOptions = Object.assign(Object.assign({}, sharedOptions()), { silent: {
        type: "boolean",
        describe: "Don't print the generated area"
    }, 
    // TODO Option to save defaults
    saveConfig: {
        type: "string",
        describe: "File type or filename to store the used configuration in",
    } });
exports.cliOptions.s.demandOption = true;
exports.interactiveOptions = Object.assign({}, sharedOptions());
exports.displayOptions = {
    f: {
        alias: "format",
        choices: ["binary", "base64"],
        describe: "The format of the output file, defaults to binary",
        requiresArg: true
    }
};
