"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const yargs_1 = __importDefault(require("yargs"));
const amazer_1 = __importStar(require("../amazer"));
const util_1 = require("../util");
const files_1 = require("./files");
const options_1 = require("./options");
const interactive_1 = require("./interactive");
const util_2 = require("./util");
// TODO Migrate from yargs to vorpal
// TODO Add logging
// TODO Cleanup the config mess
exports.version = "0.1.0";
exports.cli = yargs_1.default
    .version(exports.version)
    .showHelpOnFail(true)
    .usage("Usage: $0 [-c FILE|-s WIDTHxHEIGHT] [OPTIONS] [FILE]")
    .usage("       $0 interactive [OPTIONS] [DIRECTORY]")
    .usage("       $0 display [OPTIONS] <FILE>")
    .command(["generate [file]", "$0"], "Generate areas", options_1.cliOptions, main)
    .command("interactive [directory]", "Start an interactive session", options_1.interactiveOptions, interactive_1.interactiveLoop)
    .command("display <file>", "Read file and print area to console", options_1.displayOptions, (argv) => display(argv));
// This executes the parsing of process.argv
exports.cli.argv;
function main(argv) {
    let config = amazer_1.Config.fromObject(argv);
    const area = amazer_1.default(config).generate();
    if (!argv.silent) {
        console.log(util_1.areaToString(area));
    }
    if (argv.file !== undefined) {
        files_1.areaToFile(area, argv.file, argv.format);
    }
    const configOutputPath = getConfigOutputPath(argv);
    if (configOutputPath !== undefined) {
        files_1.writeStructuredFile(configOutputPath, util_2.prepareAmazerConfig(config));
    }
}
function display(argv) {
    const area = files_1.areaFromFile(argv.file, argv.format);
    console.log(util_1.areaToString(area));
}
function getConfigOutputPath(args) {
    if (args.saveConfig === undefined) {
        return undefined;
    }
    const dotIndex = args.saveConfig.indexOf(".");
    if (dotIndex <= 0 && args.file === undefined) {
        return undefined;
    }
    if (dotIndex > 0) {
        return args.saveConfig;
    }
    const saveConfig = args.saveConfig.length == 0 ? "yml" : args.saveConfig.substr(dotIndex + 1);
    if (saveConfig === "yml" || saveConfig === "yaml" || saveConfig === "json") {
        const outputPath = args.file;
        const filename = outputPath.substr(0, outputPath.length - outputPath.lastIndexOf(".") + 1);
        return `${filename}.${saveConfig}`;
    }
    else {
        return `${saveConfig}.yml`;
    }
}
