"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const serialize_1 = __importDefault(require("../serialize"));
const util_1 = require("../util");
// TODO Use first line as marker for the format?
function areaToFile(area, path, format = "binary") {
    if (format === undefined) {
        format = "binary";
    }
    let data;
    let fileFormat = "utf8";
    if (format === "binary") {
        data = serialize_1.default.toBytes(area);
        fileFormat = "binary";
    }
    else if (format === "base64") {
        data = serialize_1.default.toBase64(area);
    }
    else if (format === "plain") {
        data = util_1.areaToString(area);
    }
    else {
        throw new Error(`Unsupported format ${format}`);
    }
    writeFile(path, data, fileFormat);
}
exports.areaToFile = areaToFile;
function areaFromFile(path, format = "binary") {
    const encoding = format === "base64" ? "utf8" : undefined;
    const data = fs_1.default.readFileSync(path, encoding);
    if (format === "base64") {
        return serialize_1.default.fromBase64(data);
    }
    else if (format === "binary") {
        return serialize_1.default.fromBytes(data);
    }
    else {
        throw new Error(`Unsupported format ${format}`);
    }
}
exports.areaFromFile = areaFromFile;
function readStructuredFile(filePath) {
    let [fileType] = filePath.split(".").slice(-1);
    let fileContent = fs_1.default.readFileSync(filePath, "utf8");
    let result;
    switch (fileType) {
        case "yml":
        case "yaml":
            result = js_yaml_1.default.safeLoad(fileContent);
            break;
        case "json":
            result = JSON.parse(fileContent);
            break;
        default:
            throw new Error(`Unable to read file type ${fileType}`);
    }
    return result;
}
exports.readStructuredFile = readStructuredFile;
function writeStructuredFile(filePath, data) {
    let [fileType] = filePath.split(".").slice(-1);
    let output;
    switch (fileType) {
        case "yml":
        case "yaml":
            output = js_yaml_1.default.safeDump(data);
            break;
        case "json":
            output = JSON.stringify(data);
            break;
        default:
            throw new Error(`Unable to write file type ${fileType}`);
    }
    writeFile(filePath, output, "utf8");
}
exports.writeStructuredFile = writeStructuredFile;
function writeFile(filePath, data, encoding) {
    const directory = path_1.default.dirname(filePath);
    fs_1.default.mkdirSync(directory, { recursive: true });
    fs_1.default.writeFileSync(filePath, data, encoding);
}
exports.writeFile = writeFile;
