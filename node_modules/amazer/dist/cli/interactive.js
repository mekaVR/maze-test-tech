"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const readline_sync_1 = __importDefault(require("readline-sync"));
const js_yaml_1 = __importDefault(require("js-yaml"));
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
const amazer_1 = __importStar(require("../amazer"));
const util_1 = require("../util");
const files_1 = require("./files");
const util_2 = require("./util");
const main_1 = require("./main");
class Command {
    constructor(aliases, description, handler) {
        this.aliases = aliases;
        this.description = description;
        this.handler = handler;
    }
}
// TODO Enable history usable with arrows
let targetDirectory;
let outputFormat;
let exit;
let generateArea;
let configArgs;
let config;
let area;
let helpString = "This should be helpful"; // TODO Compile help string
const defaultCommand = new Command(["set"], "Set generation options", args => {
    main_1.cli.parse(args, (err, argv, output) => {
        configArgs = Object.assign(Object.assign({}, configArgs), argv);
        if (argv.format !== undefined) {
            outputFormat = argv.format;
        }
        if (output) {
            console.log(output);
        }
        if (err) {
            console.log(helpString);
        }
    });
    generateArea = true;
});
// TODO Add revert command
const commands = [
    new Command(["save", "s"], "Save the current area", args => {
        if (area !== undefined) {
            const file = args[0];
            const areaPath = determinePath(targetDirectory, file);
            files_1.areaToFile(area, areaPath, outputFormat);
        }
        else {
            console.log("No area could be generated due to previous error. Saving not possible.");
        }
        generateArea = true;
    }),
    new Command(["show-config", "c"], "Show the current configuration", _ => {
        if (config !== undefined) {
            // TODO Option to show defaults
            const configDict = util_2.prepareAmazerConfig(config);
            console.log(js_yaml_1.default.dump(configDict));
        }
        else {
            console.log("No config could be created due to previous error. Showing not possible.");
        }
    }),
    new Command(["save-config", "sc"], "Save the current configuration", args => {
        if (config !== undefined) {
            const file = args[0];
            const configPath = determinePath(targetDirectory, file, "area-config", "yml");
            files_1.writeStructuredFile(configPath, util_2.prepareAmazerConfig(config));
        }
        else {
            console.log("No config could be created due to previous error. Saving not possible.");
        }
    }),
    new Command(["exit", "quit", "q"], "Quit the application", _ => exit = true),
    new Command(["next", "n"], "Generate and display the next area", _ => generateArea = true),
    new Command(["help", "h"], "Show the help text", _ => console.log(helpString)),
    defaultCommand
];
function interactiveLoop(args) {
    targetDirectory = ".";
    if (args.directory !== undefined && args.directory.length > 0) {
        targetDirectory = args.directory;
    }
    outputFormat = args.format;
    exit = false;
    generateArea = true;
    configArgs = args;
    config = undefined;
    area = undefined;
    readline_sync_1.default.promptLoop(input => {
        const args = input.split(/\s+/);
        let commandToExecute = defaultCommand;
        let commandArgs = args;
        for (let command of commands) {
            if (command.aliases.includes(args[0])) {
                commandToExecute = command;
                commandArgs = args.slice(1);
                break;
            }
        }
        generateArea = false;
        commandToExecute.handler(commandArgs);
        if (generateArea) {
            try {
                config = amazer_1.Config.fromObject(configArgs);
                area = amazer_1.default(config).generate();
                console.log(util_1.areaToString(area));
            }
            catch (error) {
                console.log(`Error: ${error.message}`);
                config = undefined;
                area = undefined;
            }
        }
        return exit;
    });
}
exports.interactiveLoop = interactiveLoop;
function determinePath(directory, name, fallbackName = "area", fallbackType = "mz") {
    if (name) {
        if (!path_1.default.extname(name)) {
            name = `${name}.${fallbackType}`;
        }
        return path_1.default.join(directory, name);
    }
    let i = 1;
    let p;
    do {
        p = path_1.default.join(directory, `${fallbackName}${i}.${fallbackType}`);
        i++;
    } while (fs_1.default.existsSync(p));
    return p;
}
