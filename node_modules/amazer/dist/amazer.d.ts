import { Area } from "./domain/area";
import { Size } from "./domain/common";
import { GeneratorWithConfig, GeneratorConfig, AreaGenerator } from "./generator/base";
import { ModifierWithConfig, ModifierConfig, AreaModifier } from "./modifier/base";
import { Dict } from "./util";
/**
 * Class defining the necessary configuration for {@link Amazer}.
 */
export declare class Config {
    private _size;
    private _generator;
    private _modifiers;
    /**
     * @param size The size of the area to be generated
     * @param generator The generator algorithm to use
     * @param modifiers The modifiers to apply to the generated area. May be empty.
     */
    constructor(size: Size, generator: GeneratorWithConfig<any>, modifiers?: ModifierWithConfig<any>[]);
    static fromObject(data: Dict<any>): Config;
    readonly size: Size;
    readonly generator: GeneratorWithConfig<any>;
    readonly modifiers: ModifierWithConfig<any>[];
}
/**
 * Builder for {@link Amazer amazer instances}.
 *
 * Example usage:
 * ```typescript
 * const amazer: Amazer = new ConfigBuilder()
 *      .withSize({width: 10, height: 10})
 *      .using(RandomizedPrim)
 *      .andModifier(Emmure)
 *      .andModifier(BreakPassages)
 *      .build()
 * ```
 */
export declare class AmazerBuilder {
    private _size;
    private _generator;
    private _modifiers;
    /**
     * Sets the areas size.
     *
     * @returns This instance for method chaining.
     */
    withSize(size: Size): AmazerBuilder;
    /**
     * Sets the areas width.
     *
     * @returns This instance for method chaining.
     */
    withWidth(width: number): AmazerBuilder;
    /**
     * Sets the areas height.
     *
     * @returns This instance for method chaining.
     */
    withHeight(height: number): AmazerBuilder;
    /**
     * Sets the algorithm to generate the area and optionally its config.
     *
     * @param generator The algorithm to use
     * @param config The algorithms config
     *
     * @returns This instance for method chaining.
     */
    using<C extends GeneratorConfig>(generator: AreaGenerator<C>, config?: C | undefined): AmazerBuilder;
    /**
     * Adds a modifier to be applied to generated areas and optionally its config.
     *
     * @param generator The modifier to add
     * @param config The modifiers config
     *
     * @returns This instance for method chaining.
     */
    andModifier<C extends ModifierConfig>(modifier: AreaModifier<C>, config?: C | undefined): AmazerBuilder;
    /**
     * Creates a new {@link Amazer} with the current config. The builder can be used
     * afterwards to create additional instances without modifying the ones already created.
     *
     * @throws An error, if the size has not been set
     * @throws An error, if either width or height are 0
     * @throws An error, if no generator has been set
     */
    build(): Config;
    /**
     * Method stub to ease usage of {@link amazer amazer entrypoint}.
     *
     * @ignore
     */
    generate(): Area;
}
/**
 * Root class to generate {@link Area Areas}. Has a single config, but can be reused to generate
 * several areas.
 */
export declare class Amazer {
    readonly config: Config;
    constructor(config: Config);
    /**
     * Generate a new area.
     */
    generate(): Area;
}
/**
 * Global entrypoint for the amazer library.
 *
 * Creates a new {@link Amazer} instance for the given {@link Config} or a new {@link AmazerBuilder},
 * if no {@link Config} is provided.
 *
 * @param config The amazer config
 *
 * @returns A new {@link Amazer}, if a config is given, a new {@link AmazerBuilder} otherwhise.
 */
export default function amazer(config?: Config): Amazer | AmazerBuilder;
