import { Area } from "../domain/area";
import { Field } from "../util";
/**
 * Placeholder interface for general {@link AreaModifier} config
 * attributes.
 */
export interface ModifierConfig {
}
/** Functional interface for area modifiers. */
export interface AreaModifier<C extends ModifierConfig> {
    (area: Area, config: C): Area;
}
/** Helper interface for an {@link AreaModifier} and its config. */
export interface ModifierWithConfig<C extends ModifierConfig> {
    readonly modifier: AreaModifier<C>;
    readonly config?: C;
}
/** Helper interface for registered {@link AreaModifier}. */
export interface RegisteredModifier<C extends ModifierConfig> {
    readonly name: string;
    readonly modifier: AreaModifier<C>;
    readonly configFields: Field[];
}
/**
 * Registers the given {@link AreaModifier} and the fields describing
 * its config (without the fields in {@link ModifierConfig}). This allows
 * other utility methods to retrieve the registered modifier and construct
 * its config.
 *
 * @see {@link modifiers}
 * @see {@link modifier}
 * @see {@link parseModifier}
 */
export declare function registerModifier(name: string, modifier: AreaModifier<any>, configFields?: Field[] | undefined): void;
/**
 * @returns A list of all {@link registerModifier registered} and their config
 *      {@link Field fields} (if provided) as tuples.
 */
export declare function modifiers(): RegisteredModifier<any>[];
/**
 * Parses the given data as {@link AreaModifier} with config (if possible).
 *
 * The given data must be string with format `<modifier name>[:<config data>]`
 * or an object, where the first key is the modifier name and its value is
 * the config data.
 *
 * {@link configFrom} is used to create a config object from the config data.
 *
 * @param data The generator data to be parsed
 *
 * @throws An error, if the config data can not be parsed.
 */
export declare function parseModifier<C extends ModifierConfig>(arg: any): ModifierWithConfig<C>;
/**
 * @param name The modifiers name
 *
 * @returns The {@link AreaModifier} with the given name.
 *
 * @throws An error, if no modifier with the given name can be found.
 */
export declare function modifier<C extends ModifierConfig>(name: string): AreaModifier<C>;
