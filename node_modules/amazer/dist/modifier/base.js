"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const util_1 = require("../util");
const _modifiers = {};
const _configFields = {};
/**
 * Registers the given {@link AreaModifier} and the fields describing
 * its config (without the fields in {@link ModifierConfig}). This allows
 * other utility methods to retrieve the registered modifier and construct
 * its config.
 *
 * @see {@link modifiers}
 * @see {@link modifier}
 * @see {@link parseModifier}
 */
function registerModifier(name, modifier, configFields) {
    _modifiers[name] = modifier;
    if (configFields !== undefined) {
        _configFields[name] = configFields;
    }
}
exports.registerModifier = registerModifier;
/**
 * @returns A list of all {@link registerModifier registered} and their config
 *      {@link Field fields} (if provided) as tuples.
 */
function modifiers() {
    let result = [];
    for (let name in _modifiers) {
        result.push({
            name: name,
            modifier: _modifiers[name],
            configFields: _configFields[name]
        });
    }
    return result;
}
exports.modifiers = modifiers;
/**
 * Parses the given data as {@link AreaModifier} with config (if possible).
 *
 * The given data must be string with format `<modifier name>[:<config data>]`
 * or an object, where the first key is the modifier name and its value is
 * the config data.
 *
 * {@link configFrom} is used to create a config object from the config data.
 *
 * @param data The generator data to be parsed
 *
 * @throws An error, if the config data can not be parsed.
 */
function parseModifier(arg) {
    let modifierName;
    let configData;
    if (typeof arg === "string") {
        const parts = arg.split(":");
        modifierName = parts[0];
        configData = parts[1];
    }
    else {
        modifierName = Object.keys(arg)[0];
        configData = arg[modifierName];
    }
    const _modifier = modifier(modifierName);
    let config = undefined;
    if (configData !== undefined && _configFields.hasOwnProperty(_modifier.name)) {
        try {
            config = util_1.configFrom(configData, _configFields[_modifier.name]);
        }
        catch (error) {
            throw new Error(`Error parsing config for modifier ${modifierName}: ${error.message}`);
        }
    }
    return { modifier: _modifier, config: config };
}
exports.parseModifier = parseModifier;
/**
 * @param name The modifiers name
 *
 * @returns The {@link AreaModifier} with the given name.
 *
 * @throws An error, if no modifier with the given name can be found.
 */
function modifier(name) {
    const modifier = _modifiers[name];
    if (modifier === undefined) {
        throw new Error(`No modifier with name ${name} could be found`);
    }
    return modifier;
}
exports.modifier = modifier;
