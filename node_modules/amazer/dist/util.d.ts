import { Area } from "./domain/area";
/**
 * Utility interface for fields of {@link GeneratorConfig} or {@link ModifierConfig}.
 */
export interface Field {
    name: string;
    parser: Parser<any>;
}
/**
 * Utility interface specifying a function that parses a given string to a value.
 */
export interface Parser<T> {
    (value: string): T;
}
/**
 * Utility interface for better control of an objects content.
 */
export interface Dict<T> {
    [name: string]: T;
}
/**
 * Create an object from the given data for the given {@link Field fields}.
 *
 * The data can be a string where the fields are separated by `,`: `"value1, value2, field1=value3, field2=value4"`
 * The values are mapped to the fields by position or by name, if provided.
 *
 * The data can also be a {@link Dict Dict<string>}, where the keys are the field names and the values are the field
 * values to be parsed.
 *
 * @param data The data to parse the object from
 * @param fields The fields to retrieve and parse the data entries
 *
 * @throws An error, if data is a string and positional arguments are used after keyword arguments.
 * @throws An error, if data is a string and an unknown field name is given.
 * @throws An error, if a field value can not be parsed.
 */
export declare function configFrom<C>(data: string | Dict<string>, fields: Field[]): C;
/**
 * Create an object from the given string for the given {@link Field fields}.
 *
 * Must be of the form `"value1, value2, field1=value3, field2=value4"`. The field separator, value separator and
 * ignore symbol can be provided. The values are mapped to the fields by position or by name, if provided.
 *
 * @param args The string to parse the object from
 * @param fields The fields to retrieve and parse the values
 * @param fieldsSeparator The symbol to split fields by
 * @param valueSeparator The symbol to split field names and values by
 * @param ignoreField The symbol to ignore positional arguments
 *
 * @throws An error, if positional arguments are used after keyword arguments.
 * @throws An error, if an unknown field name is given.
 * @throws An error, if a field value can not be parsed.
 */
export declare function configFromArgs<C>(args: string, fields: Field[], fieldsSeparator?: string, valueSeparator?: string, ignoreField?: string): C;
/**
 * Create an object from the given data for the given {@link Field fields}.
 *
 * The datas keys are the field names and the values are the field values to be parsed.
 *
 * @param data The data to parse the object from
 * @param fields The fields to retrieve and parse the data entries
 *
 * @throws An error, if a field value can not be parsed.
 */
export declare function configFromObject<C>(data: Dict<string>, fields: Field[]): C;
/**
 * Parse the given string as number and throw an error if the result is `NaN`.
 *
 * @throws An error, if the number can not be parsed.
 */
export declare function parseNumber(number: string): number;
export declare function capitalize(s: string): string;
export declare function decapitalize(s: string): string;
/**
 * Utility method to create the string representation of an {@link Area}.
 */
export declare function areaToString(area: Area): string;
